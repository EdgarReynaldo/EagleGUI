
Notes for Eagle 5 development

Major issues

-2. GuiButton uses Area hit detection, but not well - it should use a single Area* that it checks for Contains(msx,msy)
      Combine with BasicButton? BasicButton already does this. GuiButton should be simpler I think.

-1. EagleSystem doesn't have functions to free resources early - it only releases them on destruction

0. Building with MSVC

1. EAGLE_LINK_TYPE (necessary for 0)

fix class and global function declarations to use declspec or whatever on MSVC for DLLs
so make a
#ifdef MSVC && DLL_BUILD
   #define EAGLE_DECLSPEC __declspec__
#else
   #define EAGLE_DECLSPEC
#endif

somewhere....


2. Widgets going out of scope before their Layouts / WidgetHandlers - can't call functions on their pointers in destructo code
 - Need to test differing destruction orders of widgets and layouts and widgethandlers


3. Create a widget factory that tracks widgets and frees them so the gui and layouts don't have to?
 - Mostly complete
 - Layouts no longer manage widget memory. Don't know what I was thinking with that one.

TODO : Milestones necessary for development

0. namespace EAGLE?

1. Finish basic widget set

   TODO : Widgets in production
      a - Drop down list (might want ScrollArea first)
      b - Radio Button
      c - Menu, MenuItem, MenuBar
      d - WrapText , EditText
      e - ScrollArea , ScrollBar(edit it to work as a standalone scroller if desired - wait, what does that mean? ICR)
      f - ZoomCamera (might want ScrollArea first)
      f - FlowLayout (Longterm , not uber necessary , but nice for those coming from Java)
      g - PinLayout (use alignment) , NPLayout , MenuLayout (might want to use PinLayout)
      h - Decorator , BorderDecorator, ResizeDecorator
      j - Slider, SliderKnob - DragButton
      k - Dial, Tooltip
      l - GuiWindow
      
   COMPLETE : 
      A - BasicButton , GuiButton , IconButton , ScrollButton
      B - BasicText , SelectText , LinkText
      C - Scroller, ScrollBar
      D - Camera
      E - DumbLayout , GridLayout , RelativeLayout , SplitterLayout
      F - TextDecorator, TextButton

2. Create documentation - doxygen looks best for this

3. Make the library work with MSVC (Not looking forward to this)
   A - DECLSPEC DLLEXPORT necessary for MSVC when building without .def files
   
4. Build system
   A - CodeBlocks projects are nice for me, but they're not fully portable
   B - CMake
   C - Premake http://premake.github.io/ (looks like it is under active development, with new features, and lots of compiler support)
   D - Autotools? You're kidding right?

5- Backend support
   A - SDL 2.0
   B - SFML
   C - ???

6. Platform support - already mostly possible due to Allegro's multi platform support
   A. OSX
   B. Linux
